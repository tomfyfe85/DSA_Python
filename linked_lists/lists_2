"""
If two pointers are point to the same node, if the value is changed on one pointer, 
it will be reflected on the other.
Think about linked lists like a set of linked dictionaries

CODE for the situation where the data structures are empty first
"""

# APPEND
# Add the new node to the end of the list
# Add new node, 
# tail points to new node
# self.tail = new node

# POP 
# REMOVES LAST ITME FROM THE LIST
# 2 Edge cases:
# 1 - The list is empty
# 2 - There is only one node in the list

class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

class LinkedList:
    def __init__(self,value):
        new_node = Node(value)
        self.head = new_node
        self.tail = new_node
        self.length = 1

    def append(self, value):
        new_node = Node(value)

        if self.head is None:
            self.head = new_node
            self.tail = new_node
        else:
            self.tail.next = new_node
            self.tail = new_node

        self.length += 1

    def pop(self):

        if self.length == 0:
            return None

        temp = self.head
        prev = self.head

        while (temp.next):
            prev = temp
            temp = temp.next

        self.tail = prev
        self.tail.next = None
        self.length -= 1

        if self.length == 0:
            self.head = None
            self.tail = None
        return temp


    def print_list(self):
        temp = self.head
        while temp is not None:
            print(temp.value)
            temp = temp.next


my_linked_list = LinkedList(4)
my_linked_list.append(3)
my_linked_list.append(3)
my_linked_list.append(5)
my_linked_list.pop()

my_linked_list.print_list()
